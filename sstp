#!/bin/bash

export PATH="$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"

config_file='sstp.conf' # 可被命令行参数覆盖

font_bold() {
    printf "\e[1m$*\e[0m"
}

color_red() {
    printf "\e[35m$*\e[0m"
}

color_green() {
    printf "\e[32m$*\e[0m"
}

color_yellow() {
    printf "\e[31m$*\e[0m"
}

# 打印错误消息，并退出脚本
log_error() {
    echo "$(font_bold $(color_yellow '[ERROR]')) $*" 1>&2
    exit 1
}

command_is_exists() {
    type -P "$1" &>/dev/null
}

command_required() {
    command_is_exists "$1" || log_error "command not found: $1"
}

group_is_exists() {
    if is_uint "$1"; then # gid
        grep -q ":$1:" /etc/group
    else # name
        grep -q "^$1:" /etc/group
    fi
}

create_group() {
    if is_uint "$1"; then # gid
        log_error "gid:'$1' not exists, please check proxy_procgroup"
    elif command_is_exists groupadd; then
        groupadd "$1" || log_error "failed to create group:'$1' via groupadd, exit-code: $?"
    elif command_is_exists addgroup; then
        addgroup "$1" || log_error "failed to create group:'$1' via addgroup, exit-code: $?"
    else
        log_error "group:'$1' not exists, and groupadd/addgroup are not found, please create it manually"
    fi
}

# group command
set_command_group() {
    command_required "$2"
    local group="$1" path="$(command_path "$2")"
    chgrp "$group" "$path" || log_error "chgrp failed: group=$group path=$path"
    chmod g+xs "$path"
}

# command
set_proxy_group() {
    set_command_group "$proxy_procgroup" "$1"
}

file_is_exists() {
    [ -f "$1" ]
}

file_required() {
    file_is_exists "$1" || log_error "file not found: $1"
}

list_ext_ipv4() {
    grep '^-' "$1" | cut -c2-
}

list_ext_ipv6() {
    grep '^~' "$1" | cut -c2-
}

list_ext_domain() {
    grep '^@' "$1" | cut -c2-
}

fetch_url() {
    command_required 'curl'

    local url="$1" filename="$2"

    local data # 声明和赋值必须分开，不然错误码会丢失
    data="$(set -o pipefail; curl -4fsSkL "$url" | grep -v -e '^[[:space:]]*$' -e '^[[:space:]]*#')" ||
        log_error "download failed: $url (exit-code: $?)"

    echo "$data" > $filename
}

parse_github() {
    cat $file_github | python3 github.py
}

update_github() {
    fetch_url $url_github $file_github
    (cat $file_github | python3 github.py) > $file_github_ip
}

update_google() {
    fetch_url $url_google $file_google
    (cat $file_google | python3 google.py) > $file_google_ip
}

update_aws() {
    fetch_url $url_aws $file_aws
    (cat $file_aws | python3 aws.py) > $file_aws_ip
}

is_uint() {
    [ "$1" ] && [ -z "${1//[0-9]/}" ]
}

is_true() {
    [ "$1" = 1 ]
}

is_enabled_ipv4() {
    is_true "$ipv4_enable"
}

is_enabled_ipv6() {
    is_true "$ipv6_enable"
}

# str substr
str_find() {
    [[ "$1" == *"$2"* ]]
}

load_config() {
    file_required $config_file

    source $config_file "${arg_list[@]}" ||
        log_error "$config_file load failed, exit-code: $?"

    [ "$proxy_procgroup" -a "$proxy_procgroup" != 0 -a "$proxy_procgroup" != root ] ||
        log_error "invalid config value for proxy_procgroup: '$proxy_procgroup'"

    group_is_exists "$proxy_procgroup" || create_group "$proxy_procgroup"
}

# setname <ip_list
init_ipset() {
    ipset create -exist $1 hash:net family $(str_find $1 6 && echo inet6 || echo inet)
    sed "s/^/add $1 /" | ipset -! restore
}

start_ipset() {
     is_enabled_ipv4 && list_ext_ipv4 $file_github_ip  | init_ipset sstp_v4
     is_enabled_ipv6 && list_ext_ipv6 $file_github_ip  | init_ipset sstp_v6
     is_enabled_ipv4 && list_ext_ipv4 $file_google_ip  | init_ipset sstp_v4
     is_enabled_ipv6 && list_ext_ipv6 $file_google_ip  | init_ipset sstp_v6
     is_enabled_ipv4 && list_ext_ipv4 $file_aws_ip  | init_ipset sstp_v4
     is_enabled_ipv6 && list_ext_ipv6 $file_aws_ip  | init_ipset sstp_v6
}

# 失败也不退出，避免逻辑执行不完整
start_proxyproc() {
    eval "$proxy_startcmd"
}

stop_proxyproc() {
    eval "$proxy_stopcmd"
}

get_dst_port_match() {
    [ "$proxy_dst_port" ] &&
        echo "-m multiport --dports $proxy_dst_port"
}

is_ipv4_ipts() {
    [ "$1" = 'iptables' ]
}

_start_iptables() {
    if is_ipv4_ipts $1; then
        setname="sstp_v4"
        loopback_addrx="127.0.0.1"
    else
        setname="sstp_v6"
        loopback_addrx="[::1]"
    fi

     $1 -t nat -I OUTPUT -m addrtype ! --dst-type LOCAL -m owner ! --gid-owner $proxy_procgroup -p tcp $(get_dst_port_match) -m set --match-set $setname dst -j DNAT --to-destination $loopback_addrx:$proxy_tcpport  -m comment --comment "SSTP"
     #sudo iptables -t nat -I OUTPUT -m addrtype ! --dst-type LOCAL -m owner ! --gid-owner 13 -p tcp -m set --match-set sstp_v4 dst -j DNAT --to-destination 127.0.0.1:60080 -m comment --comment "FUCKGFW"

}

start_iptables() {
    is_enabled_ipv4 && _start_iptables "iptables"
    is_enabled_ipv6 && _start_iptables "ip6tables"
}

_flush_iptables() {
    for n in $($1 -t nat -L OUTPUT --line-numbers|grep SSTP| cut -c1); do
        $1 -t nat -D OUTPUT $n &>/dev/null
    done
}

flush_iptables() {
    _flush_iptables "iptables"
    _flush_iptables "ip6tables"
}

flush_ipset() {
    for setname in $(ipset -n list | grep '^sstp_'); do
        ipset destroy $setname &>/dev/null
    done
}

_show_iptables() {
    echo "$(color_green "==> $1-nat <==")"
    $1 -t nat -S
}

show_iptables() {
    is_enabled_ipv4 && _show_iptables "iptables"
    { is_enabled_ipv4 && is_enabled_ipv6; } && echo
    is_enabled_ipv6 && _show_iptables "ip6tables"
}

show_ipset() {
    ipset -L
}

add_netip() {
    ipset add $(str_find $1 6 && echo sstp_v6 || echo sstp_v4) $1
}

start() {
    start_ipset # 先创建ipset
    start_proxyproc
    start_iptables
}

stop() {
    flush_iptables
    stop_proxyproc
    flush_ipset
}

help() {
    cat <<EOF
Usage: sstp <COMMAND> ... [-x]
COMMAND := {
    start               start sstp
    stop                stop sstp
    restart             restart sstp
    show-iptables       show iptables rules
    show-ipset          show ipset list
    update-github       update github ip list
    update-google       update google ip list
    update-aws          update aws ip list
    addnetip            add netip to list
    set-proxy-group     set group for executable
    version             show version and exit
    help                show help and exit
}
Specify the -x option to debug script
EOF
}

main() {
    local argv=("$@")
     local arg_list=() #所有位置参数

    for ((i = 0; i < ${#argv[@]}; ++i)); do
        local arg="${argv[i]}"
        case "$arg" in
            -x) set -x;;
            -c) config_file="${argv[++i]}";;
            -*) echo "$(color_yellow "Unknown option: $arg")"; help; return 1;;
            *) arg_list+=("$arg");;
        esac
    done

    if [ "${#arg_list[@]}" -eq 0 ]; then
        help
        return 0
    fi

    # 先加载sstp.conf
    load_config

    case "${arg_list[0]}" in
        start)           start;;
        stop)            stop;;
        r*)              stop; echo; start;;
        stat*)           status;;
        show-iptables)   show_iptables;;
         show-ipset)     show_ipset;;
        update-github)   update_github;;
        update-google)   update_google;;
        update-aws)      update_aws;;
        addnetip)        add_netip "${arg_list[1]}";;
        set-proxy-group) set_proxy_group "${arg_list[1]}";;
        v*)              version;;
        h*)              help;;
        *)               echo "$(color_yellow "Unknown command: ${arg_list[0]}")"; help; return 1;;
    esac

    return 0
}

main "$@"